#!/usr/bin/env python3
# This script produces reports on electrical power and push it into mqtt.
# repo is in github.com/kadavris
import argparse
import configparser
import os
import os.path
import re
import signal
import socket
import sys
import shlex, subprocess
import time

#############################################################
def handle_termination(signum, frame):
	if args.debug:
		print( "signal caught. exitting." )

	if sender:
		sender.terminate()

	sys.exit(0)

#############################################################
def load_config( c_file ):
	global args, config

	file = c_file

	if not os.path.exists( file ):
		if re.search( r'/', file ):
			print( "Can't open config: " + file )
			sys.exit(1)

		file = os.path.dirname( sys.argv[0] ) + '/' + c_file

		if not os.path.exists( file ):
			file = '/etc/smarthome/reporters/' + c_file

	args.debug and print( "+ Loading config: " + file )

	config = configparser.ConfigParser( interpolation = configparser.ExtendedInterpolation() )
	config.read( file )

########################################
def spawn_sender():
	global args, config, sender

	sender = subprocess.Popen( shlex.split( config[ 'power' ][ 'sender' ] ), bufsize = 1, # default bufsize may gobble a whole loop of data and do nothing till the next
			stdin = subprocess.PIPE, stdout = ( None if args.debug else subprocess.DEVNULL ),
			stderr = ( None if args.debug else subprocess.DEVNULL ), text = True )

	if not sender:
		print( '? ERROR running ', config[ 'power' ][ 'sender' ] )
		sys.exit( 1 )

	if sender.poll():
		if sender.returncode > 0:
			print( '? ERROR running ', sender.args, ": exitted abnormally with rc:", sender.returncode )
			sys.exit( 1 )

########################################
def send_message( msg ):
	global args, config, sender

	while True:
		if not sender:
			spawn_sender()

		err = False

		try:
			sender.stdin.write( msg )

		except:
			if args.debug:
				print( "Error sending message." )

			err = True

		if not err:
			return

		if sender:
			sender.terminate()
			sender = None

		time.sleep( 5 )


########################################
# will update stats[ device ] with minute, hour or day depending on prefix
# now it sums values for simple mean calculation
def update_stats( device, prefix, time_value, voltage, freq ):
	global stats

	if stats[ device ][ prefix + 'start' ] != time_value:
		stats[ device ][ prefix + 'v' ] = stats[ device ][ prefix + '_v_mean' ] + voltage
		stats[ device ][ prefix + 'f' ] = stats[ device ][ prefix + '_f_mean' ] + freq
		stats[ device ][ prefix + 'samples' ] = 2
		stats[ device ][ prefix + 'start' ] = time_value
	else:
		stats[ device ][ prefix + 'samples' ] += 1
		stats[ device ][ prefix + 'v' ] += voltage
		stats[ device ][ prefix + 'f' ] += freq

		stats[ device ][ prefix + '_v_mean' ] = stats[ device ][ prefix + 'v' ] // stats[ device ][ prefix + 'samples' ]
		stats[ device ][ prefix + '_f_mean' ] = stats[ device ][ prefix + 'f' ] // stats[ device ][ prefix + 'samples' ]

########################################
# collects data from upsc output for given device.
# return hash: { model:model+s/n, smart:attributes json, temperature }
def get_upsc_output( device ):
	global args, config, stats

	ret = { "model": "UNKNOWN", "errors":'' }

	need = [ # minimal attributes needed (note '.' replaced by '_')
		'device_mfr', # device.mfr: EATON
		'device_model', # device.model: 5E 1500i
		'device_type', # device.type: ups
		'ups_status', # ups.status: OL
	]

	if 'bulk_report' in config[ 'power' ]:
		ret[ 'bulk_report' ] = config[ 'power' ].get( 'bulk_report' ).split( )
		need += ret[ 'bulk_report' ]

	ret[ 'need' ] = need
	ret[ 'data' ] = {}

	upsc = subprocess.Popen( [ 'upsc', device ],
				stdin = subprocess.DEVNULL, stdout = subprocess.PIPE,
				stderr = ( None if args.debug else subprocess.DEVNULL ), text = True )
	
	if upsc.poll():
		if upsc.returncode > 0:
			ret[ "errors" ] = '"upsc error":"ended with rc: ' + upsc.returncode + '"'
			print( ret[ "errors" ] )
		return ret

	out, err = upsc.communicate() # communicate() will return all output at once
	if err and ( err != '' ):
		ret[ "errors" ] = '"upsc error":"' + err + "'"
		print( ret[ "errors" ] )
		return ret
	
	for l in out.splitlines():
		# attributes array
		rm = re.match( r'([\w.]+):\s+(.+)', l )
		if not rm:
			continue

		id = rm.group( 1 ).replace( '.', '_' )
		value = rm.group( 2 )

		id.replace( '.', '_' )

		if not id in need:
			continue

		ret[ 'data' ][ id ] = value

#		if args.debug:
#			print( 'got:', id, ':', value )

		# fill in specials:
		if id == 'device_mfr': # ups.mfr: EATON
			ret[ 'model' ] = "Model: " + value
		elif id == 'device_model': # ups.model: 5E 1500i
			ret[ 'model' ] += ' ' + value

	# do some stats
	try:
		t = time.localtime()

		v = float( ret[ 'data' ][ 'input_voltage' ] )
		f = float( ret[ 'data' ][ 'input_frequency' ] ) if 'input_frequency' in ret[ 'data' ] else 0
		if f == 0:
			f = float( ret[ 'data' ][ 'output_frequency' ] ) if 'output_frequency' in ret[ 'data' ] else 0

		if device not in stats: # init
			stats[ device ] = {
				'mstart':0, 'm_v_mean':v, 'mv':v, 'mf':f, 'm_f_mean':f, 'msamples':1,
				'hstart':0, 'h_v_mean':v, 'hv':v, 'hf':f, 'h_f_mean':f, 'hsamples':1,
				'dstart':0, 'd_v_mean':v, 'dv':v, 'df':f, 'd_f_mean':f, 'dsamples':1
				}

		update_stats( device, 'm', t.tm_min,  v, f )
		update_stats( device, 'h', t.tm_hour, v, f )
		update_stats( device, 'd', t.tm_mday, v, f )

		ret[ 'data' ][ 'voltage_mean_minute' ] = stats[ device ][ 'm_v_mean' ]
		ret[ 'data' ][ 'frequency_mean_minute' ] = stats[ device ][ 'm_f_mean' ]

		ret[ 'data' ][ 'voltage_mean_hour' ] = stats[ device ][ 'h_v_mean' ]
		ret[ 'data' ][ 'frequency_mean_hour' ] = stats[ device ][ 'h_f_mean' ]

		ret[ 'data' ][ 'voltage_mean_day' ] = stats[ device ][ 'd_v_mean' ]
		ret[ 'data' ][ 'frequency_mean_day' ] = stats[ device ][ 'd_f_mean' ]
	except:
		pass

	return ret

########################################
# This function will check upsd/nut status
def check_nut():
	global args, config, log_items, sender, stats

	cf = config[ 'power' ]
	
	dev_list = []
	if 'devices' in cf:
		dev_list = cf[ 'devices' ].split()
	else:
		upsc = subprocess.Popen( [ 'upsc', '-l' ], 
				stdin = subprocess.DEVNULL, stdout = subprocess.PIPE,
				stderr = ( None if args.debug else subprocess.DEVNULL ), text = True )
		dev_list = upsc.communicate()[0].splitlines()

	for device in dev_list:
		topic = cf[ 'device_topic' ].replace( '$device', device )

		if args.debug:
			print( 'device:', device, 'topic:', topic )
		# topic structure:
		# power
		#     <dev_id>
		#         ctl...
		#         proto...
		#         state...
		#         updated

		data = get_upsc_output( device )

		# we will count the configured checks to report if none were enabled actually
		checks_run = 0
		checks_with_errors = 0

		msg = ''
		checks_run += 1
		if data[ 'errors' ] != '' or ( not 'ups_status' in data[ 'data' ] ):
			msg = data[ 'errors' ]
			checks_with_errors += 1
		else:
			msg = data[ 'data' ][ 'ups_status' ]

		# doing bulk report message. we'll use mpublish, so no quoting is needed
		bulk_msg = '{ "model":"' + data[ 'model' ] + '", "errors":"' + data[ "errors" ] + '"'
		
		for k in data[ 'data' ]:
			bulk_msg += ', "' + k + '":"' + str( data[ 'data' ][ k ] ) + '"'

		bulk_msg += ' }'

		# --------------------------------
		if 'log_samples' in cf:
			try:
				t = time.strftime( r'%Y-%m-%d %H:%M:%S' )

				line = ''
				if len( log_items ) > 0: # subset of data requested
					for k in log_items:
						if k not in data[ 'data' ]:
							line += t + ' WARNING! upsc does not provide item "' + k + '"\n'
							del log_items[ k ]

					line += t + ' { "date":"' + t + '"'

					for k in log_items:
						line += ', "' + k + '":"' + str( data[ 'data' ][ k ] ) + '"'

					line += ' }\n'

				else:
					line = t + bulk_msg.replace( '\n', ' ' ) + '\n'

				logname = cf[ 'log_samples' ].replace( '$device', device )
				open( logname, mode = 'a' ).writelines( line )

			except:
				del cf[ 'log_samples' ]
				print( '! Error opening log file: ', logname, ':', sys.exc_info()[0], file = sys.stderr )

		next_rep = device + '_next_report'

		if ( next_rep in stats ) and stats[ next_rep ] > time.time(): # too soon to report?
			continue

		stats[ next_rep ] = time.time() + float( cf[ 'report_interval' ] )

		# --------------------------------
		if args.debug:
			print( '\n\n. sending: ', msg )

		send_message( '{ "publish":"' + msg + '", "retain":true, "topics":[ "' + topic + '/' + cf[ 'state_topic' ] + '" ] }\n' )

		# sending bulk data
		stop = '25@5h256h256H'
		send_message( '{ "mpublish":"' + stop + '", "retain":true, "topics":[ "' + topic + '" ] }\n' + bulk_msg + stop + '\n' )

		send_message( '{ "publish":"'
			+ dates_json.replace( '}', r', \"checks run\":' + str( checks_run ) + r', \"checks with errors\":' + str( checks_with_errors ) + '}' )
			+ '", "retain":true, "topics":[ "' + topic + '/' + cf[ 'updated_topic' ] + '" ] }\n' )

		# quick post one-to-one data
		if 'one_to_one' in cf:
			for pair in cf.get( 'one_to_one' ).split( ):
				a,t = pair.split( ':' )
				checks_run += 1
				msg = ''

				if a in data[ 'data' ]:
					msg = data[ 'data' ][ a ]
				else:
					msg = 'one_to_one attribute is missing from report: ' + a
					checks_with_errors += 1

				send_message( '{ "publish":"' + msg + '", "retain":true, "topics":[ "'
							+ topic + '/' + t + '" ] }\n' )

	# end loop: for device in os.listdir( '/dev' ):

####################################################
global args, config, dates_json, root_topic, log_items, sender, stats

config_path = '/etc/smarthome/reporters/reporters.ini' # default

####################################################

parser = argparse.ArgumentParser( description = 'Collect electrical power info and post it to mqtt' )
parser.add_argument( '-c', '--config', dest = 'config_path', action = 'store', default = config_path, help = 'path to non-default (' + config_path + ') config file')
parser.add_argument( '-d', '--debug', dest = 'debug', action = 'store_true', default = False, help = 'debug mode')
parser.add_argument( '-l', '--loop', dest = 'loop', action = 'store', type = int, default = 0, help = 'Loop forever, sleeping <int> seconds between passes. Overrides config settings' )
parser.add_argument( 'action', nargs = '?', default = '', help = 'non-default action name to run' )

args = parser.parse_args()

load_config( args.config_path )

# mqtt sender script tend to hang up (why no SIGPIPE on stdin read?) if we exit hastily. trying to avoid this
signal.signal( signal.SIGINT,  handle_termination )
signal.signal( signal.SIGTERM, handle_termination )

hba = socket.gethostbyaddr(socket.gethostname())
hostname = re.sub( r'\..+', '', hba[ 0 ] )

spawn_sender()

if args.debug:
	if not sender:
		sys.exit( 1 )

	print( 'sender:', sender.args )

dates_json = ''
queue = []
stats = {}

# pre-caching the list of items to put in the log
log_items = []
if 'log_items' in config[ 'power' ]:
	log_items = config[ 'power' ].get( 'log_items' ).split( )

##################################
# set necessary defaults
if 'sample_interval' not in config[ 'power' ]:
	if args.loop > 0:
		config[ 'power' ][ 'sample_interval' ] = str( args.loop )
	else:
		config[ 'power' ][ 'sample_interval' ] = '30' # seconds

if 'report_interval' not in config[ 'power' ]:
	if args.loop > 0:
		config[ 'power' ][ 'report_interval' ] = str( args.loop )
	else:
		config[ 'power' ][ 'report_interval' ] = config[ 'power' ][ 'sample_interval' ]

##################################
if args.action != '':
	queue.append( args.action )
else:
	queue = [ check_nut ]

while True:
	dates_json = '{ "date":"' + time.ctime() + '", "timestamp":' + str( int( time.time() ) ) + ' }'
	dates_json = dates_json.replace( r'"', r'\"')

	for func in queue:
		func()

	if int( config[ 'power' ][ 'sample_interval' ] ) <= 0:
		break

	time.sleep( int( config[ 'power' ][ 'sample_interval' ] ) )

try:
	sender.communicate( input = '\n\n{ "cmd":"exit" }\n' )

	sender.wait( timeout = 15.0 )
except:
	pass

sender.terminate()
