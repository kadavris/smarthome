#!/usr/bin/env python3
# This script produces reports on storage health and push it into mqtt.
# repo is in github.com/kadavris
import argparse
import configparser
import os
import os.path
import re
import signal
import socket
import sys
import shlex, subprocess
import time

#############################################################
def handle_termination(signum, frame):
	if sender:
		sender.terminate()

	sys.exit(0)

#############################################################
def load_config( c_file ):
	global args, config

	file = c_file

	if not os.path.exists( file ):
		if re.search( r'/', file ):
			print( "Can't open config: " + file )
			sys.exit(1)

		file = os.path.dirname( sys.argv[0] ) + '/' + c_file

		if not os.path.exists( file ):
			file = '/etc/smarthome/reporters/' + c_file

	args.debug and print( "+ Loading config: " + file )

	config = configparser.ConfigParser( interpolation = configparser.ExtendedInterpolation() )
	config.read( file )

########################################
def get_mounts():
	global args, config, sender

	mf = open( '/proc/mounts', 'r' )

	while True:
		l = mf.readline()
		if len( l ) == 0:
			break
		rm = re.match( r'^(\S+)\s+(\S+)\s+(\S+)\s+(.+)', l ) # /dev/X mount_point fs_type options
		mounts[ rm.group( 2 ) ] = { 'disk': rm.group( 1 ), 'fstype': rm.group( 3 ), 'options': rm.group( 4 ) }

	mf.close()

########################################
# collects data from smartctl. return hash: { model:model+s/n, smart:attributes json, temperature }
def do_smartctl( device ):
	global args, config

	ret = {
		"model": "UNKNOWN", "smart": '', "temperature": "UNKNOWN", "status":"",
		"tests done":0, "tests failed":0,
		"age":0,
		"sctl err":''
	}
	attrs = []

	params = shlex.split( config[ 'storage' ][ 'smartctl' ] )
	params.append( '/dev/' + device )
	sctl = subprocess.Popen( params, stdout = subprocess.PIPE, stderr = subprocess.PIPE, text = True )

	if sctl.poll():
		if sctl.returncode > 0:
			ret[ "sctl err" ] = ',"smartctl error":"ended with rc: ' + sctl.returncode + '"'
			print( ret[ "sctl err" ] )
		return ret

	out, err = sctl.communicate() # communicate() will return all output at once
	if err != '':
		ret[ "sctl err" ] = ',"smartctl error":"' + err + "'"
		print( ret[ "sctl err" ] )
		return ret

	place = 'body' # basic state machine
	for l in out.splitlines():
		l = l.rstrip()

		if place == 'body':
			if re.match( r'ID#\s+ATTRIBUTE_NAME', l ):
				place = 'attr'
				continue

			if re.match( r'Num\s+Test_Description', l ):
				place = 'tests'
				continue

		if place == 'attr':
			# attributes array
			#ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE
			rm = re.match( r'\D*(\d+)\s+(\S+)(\s+\S+){7}\s+(.+)', l )
			if not rm:
				place = 'body'
				continue

			id = rm.group( 1 )
			name = re.sub( '_+', ' ', rm.group( 2 ) )
			data = re.sub( '"', r'\\"', rm.group( 4 ) )

			attrs.append( '"' + id + '":{ "name":"' + name + '", "data":"' + data + '" }' )

			if id == '194':
				ret[ 'temperature' ] = re.sub( r'\D.+', '', data )
			#  9 Power_On_Hours          0x0032   099   099   000    Old_age   Always       -       915 (222 63 0)
			# we'll use it to check if the tests are fresh enough
			elif id == '9':
				ret[ 'age' ] = int( re.sub( '\D.*', '', data ) )

			# other attributes to consider for special processing. possibly for later:
			#  5 Reallocated_Sector_Ct   0x0033   100   100   010    Pre-fail  Always       -       0
			#187 Reported_Uncorrect      0x0032   100   100   000    Old_age   Always       -       0
			#197 Current_Pending_Sector  0x0012   100   100   000    Old_age   Always       -       0
			#198 Offline_Uncorrectable   0x0010   100   100   000    Old_age   Offline      -       0
			#199 UDMA_CRC_Error_Count    0x003e   200   200   000    Old_age   Always       -       0
			#241 Total_LBAs_Written      0x0000   100   253   000    Old_age   Offline      -       28754942980
			#242 Total_LBAs_Read         0x0000   100   253   000    Old_age   Offline      -       18442954018

			continue

		if place == 'tests':
			#Num  Test_Description    Status                  Remaining  LifeTime(hours)  LBA_of_first_error
			## 1  Short offline       Completed without error       00%       897         -
			rm = re.match( r'\D*(\d+).+?(\d+)%\s+(\d+)\s+(.+)', l )

			if not rm:
				place = 'body'
				continue

			# account for complete tests only
			if rm.group( 2 ) == '00':
				ret[ 'tests done' ] += 1
				if rm.group( 4 ) != '-':
					ret[ 'tests failed' ] += 1

			# check if most recent test is fresh enough
			last_test_age = ret[ 'age' ] - int( rm.group( 3 ) )

			if ret[ 'tests done' ] == 0 or ( rm.group( 1 ) == '1' and last_test_age > 24 * 7 ): # more than week
				ret[ 'testing status' ] = "tests didn't performed for " + str( int( last_test_age / 24 ) ) + " days"
			else:
				ret[ 'testing status' ] = "OK"

			continue

		if place == 'body':
			# header:
			rm = re.match( r'Device Model:\s+(.+)', l )
			if rm:
				ret[ 'model' ] = "Model: " + rm.group( 1 )

			rm = re.match( r'Serial Number:\s+(.+)', l )
			if rm:

				ret[ 'model' ] += ", S/N: " + rm.group( 1 )
			continue

	sctl.terminate()

	ret[ 'smart' ] = '{\n  ' + ",\n  ".join( attrs ) + '\n}'

	return ret

########################################
# This function will check /dev/sd?
def check_storage_sd():
	global args, config, sender

	for device in os.listdir( '/dev' ):
		if not re.match( 'sd[a-z]$', device ):
			continue

		if args.debug:
			print( 'device:', device )

		# check if it is ata one:
		rm = re.search( r'/devices/pci[^/]+/[^/]+/ata\d+', os.readlink( "/sys/class/block/" + device ) )
		if not rm:
			if args.debug:
				print( '\t- not ata' )
			continue

		cf = config[ 'storage' ]
		topic = cf[ 'device_topic' ].replace( '$device', device )

		# we will count the configured checks to report if none were enabled actually
		checks_run = 0
		checks_with_errors = 0

		state = '' # we'll try to determina it by any test enabled

		# doing check_ide_smart run if configured
		if 'check_ide_smart' in cf:
			checks_run += 1
			params = shlex.split( cf[ 'check_ide_smart' ] )
			params.append( '/dev/' + device )
			cis = subprocess.Popen( params, stdout = subprocess.PIPE, stderr = subprocess.PIPE, text = True )

			state, err = cis.communicate() # communicate will slurp output and close pipe
			state = re.sub( '^OK .*', 'OK', state.rstrip() ) # strip out clutter
			if err != '':
				checks_with_errors += 1
				state += '(' + err + ')'

		# doing smartctl run if configured
		sctl = {}
		if 'smartctl' in cf:
			checks_run += 1
			sctl = do_smartctl( device )

			if sctl[ "sctl err" ] != '':
				checks_with_errors += 1

			if sctl[ "testing status" ] != 'OK':
				checks_with_errors += 1

				if state == '':
					state = 'WARNING:'

				state += ' ' + sctl[ "testing status" ]

			msg = '{ "model":"' + sctl[ 'model' ] + '",' + sctl[ "sctl err" ] + '\n"smart":"' + sctl[ 'smart' ] + '"'\
					+ ',\n"tests done":' + str( sctl[ 'tests done' ] ) + ',"tests failed":' + str( sctl[ 'tests failed' ] )\
					+ ' }'

			if state == '': # must fill in. mimic check_ide_smart here
				if sctl[ 'tests failed' ] > 0:
					state = 'WARNING: ' + sctl[ 'tests failed' ] + ' of ' + sctl[ 'tests done' ] + ' recent tests failed!'
				else:
					state = 'OK'

			# we'll use mpublish, so no quoting needed
			stop = '25@5h256h256H'
			sender.stdin.write( '{ "mpublish":"' + stop + '", "retain":true, "topics":[ "' + topic + '" ] }\n' + msg + stop + '\n' )
			sender.stdin.write( '{ "publish":"' + sctl[ 'temperature' ] + '", "retain":true, "topics":[ "' + topic + '/' + cf[ 'temperature_topic' ] + '" ] }\n' )

		if state != '': # so we got somethig meaningful to report here
			sender.stdin.write( '{ "publish":"' + state.replace( '"', r'\"' ) + '", "retain":true, "topics":[ "' + topic + '/' + cf[ 'state_topic' ] + '" ] }\n' )

			sender.stdin.write( '{ "publish":"' + dates_json.replace( '}', r', \"checks run\":' + str( checks_run )
				+ r', \"checks with errors\":' + str( checks_with_errors )+ '}' )
				+ '", "retain":true, "topics":[ "' + topic + '/' + cf[ 'updated_topic' ] + '" ] }\n' )
	# end loop: for device in os.listdir( '/dev' ):

########################################
def check_storage():
	check_storage_sd() # do low-level first

####################################################
global args, config, dates_json, root_topic, sender

config_path = '/etc/smarthome/reporters/reporters.ini' # default

####################################################

parser = argparse.ArgumentParser( description = 'Collect state info from /dev/sdX and other storage and post it to mqtt' )
parser.add_argument( '-c', '--config', dest = 'config_path', action = 'store', default = config_path, help = 'path to non-default (' + config_path + ') config file')
parser.add_argument( '-d', '--debug', dest = 'debug', action = 'store_true', default = False, help = 'debug mode')
parser.add_argument( '-l', '--loop', dest = 'loop', action = 'store', type = int, default = 0, help = 'Loop forever, sleeping <int> seconds between passes' )
parser.add_argument( 'action', nargs = '?', default = '', help = 'non-default action name to run' )

args = parser.parse_args()

load_config( args.config_path )

hba = socket.gethostbyaddr(socket.gethostname())
hostname = re.sub( r'\..+', '', hba[ 0 ] )

# mqtt sender script tend to hang up (why no SIGPIPE on stdin read?) if we exit hastily. trying to avoid this
signal.signal( signal.SIGINT,  handle_termination )
signal.signal( signal.SIGTERM, handle_termination )

sender = subprocess.Popen( shlex.split( config[ 'storage' ][ 'sender' ] ), bufsize = 1, # default bufsize may gobble a whole loop of data and do nothing till the next
		stdin = subprocess.PIPE, stdout = ( None if args.debug else subprocess.DEVNULL ),
		stderr = ( None if args.debug else subprocess.DEVNULL ), text = True )

if args.debug:
	print( 'sender:', sender.args )

dates_json = ''
queue = []
mounts = dict()

if args.action != '':
	queue.append( args.action )
else:
	queue = [ check_storage ]

while True:
	dates_json = '{ "date":"' + time.ctime() + '", "timestamp":' + str( int( time.time() ) ) + ' }'
	dates_json = dates_json.replace( r'"', r'\"')

	for func in queue:
		func()

	if args.loop == 0:
		break

	time.sleep( args.loop )

sender.communicate( input = '\n\n{ "cmd":"exit" }\n' )

try:
	sender.wait( timeout = 5.0 )
except:
	pass

sender.terminate()
